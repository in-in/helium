@import "vars";

@mixin breakpoint($size) {
  @if map-get($sizes, $size) {
    @media (min-width: map-get($sizes, $size) + px) {
      @content;
    }
  } @else {
    @error "Unknown size: #{$size}";
  }
}

@mixin font-face($name, $filename, $weight: 400, $style: normal, $ext: woff2) {
  @font-face {
    font-family: quote($name);
    font-weight: $weight;
    font-style: $style;
    src: url(quote("../fonts/" + $filename + "." + $ext)) format(quote($ext));
  }
}

@mixin divider {
  &::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 1px;
    background-color: var(--blue_cornflower--l_20);
  }
}

@mixin hover_transition() {
  transition-property: background-color, color, fill;
  transition-duration: var(--transition_duration);
  transition-timing-function: var(--transition_easeing);
}

@mixin hover($selector: null, $combinator: " ") {
  @if $selector {
    #{$selector} {
      @include hover_transition;
    }
  } @else {
    @include hover_transition;
  }

  &:hover#{$combinator}#{$selector},
  &:focus#{$combinator}#{$selector} {
    @content;
  }
}

@function t_c($target, $context, $unit: p) {
  $result: ($target / $context) * 100;

  @if $unit == p {
    @return ($result + 0%);
  } @else if $unit == vw {
    @return ($result + vw);
  } @else {
    @error "Unknown unit #{$unit}.";
  }
}

@function em($px, $context) {
  @return calc((#{$px} / #{$context}) * 1em);
}

@function locks(
  $font_min,
  $font_max,
  $viewport_min: map-get($sizes, xs),
  $viewport_max: map-get($sizes, xl)
) {
  $m: ($font_max - $font_min) / ($viewport_max - $viewport_min);
  $b: ($font_min - $m * $viewport_min) / $base_font;
  @return calc(#{$m} * 100vw + #{$b + rem});
}
