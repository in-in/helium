@import "vars";

@mixin breakpoint($size) {
	@if map-get($sizes, $size) {
		@media (min-width: map-get($sizes, $size) + px) {
			@content;
		}
	} @else {
		@error "Unknown size: #{$size}";
	}
}

@mixin font-face($name, $filename, $weight: 400, $style: normal, $ext: woff2) {
	@font-face {
		font-family: quote($name);
		font-weight: $weight;
		font-style: $style;
		src: url(quote("../fonts/" + $filename + "." + $ext)) format(quote($ext));
	}
}

@mixin divider($top: true, $bottom: true) {
	position: relative;

	&::before,
	&::after {
		content: "";
		position: absolute;
		inset-inline-start: 0;
		width: 100%;
		height: 1px;
		background-color: $blue_cornflower--l_20;
	}

	&::before {
		inset-block-start: 0;
		display: if($top, null, none);
	}

	&::after {
		inset-block-end: 0;
		display: if($bottom, null, none);
	}
}

@mixin hover_transition() {
	transition-property: background-color, color, fill;
	transition-duration: var(--transition_duration);
	transition-timing-function: var(--transition_easeing);
}

@mixin hover($selector: null, $combinator: " ") {
	@if $selector {
		#{$selector} {
			@include hover_transition;
		}
	} @else {
		@include hover_transition;
	}

	&:hover#{$combinator}#{$selector},
	&:focus#{$combinator}#{$selector} {
		@content;
	}
}

@function compose($classname) {
	@return str-slice(#{$classname}, 2);
}

@function t2c($target, $context, $unit: p) {
	$result: calc((#{$target} / #{$context}) * 100);

	@if $unit == p {
		@return (calc(#{$result} * 1%));
	} @else if $unit == vw {
		@return (calc(#{$result} * 1vw));
	} @else {
		@error "Unknown unit #{$unit}.";
	}
}

@function em($px, $context) {
	@return calc((#{$px} / #{$context}) * 1em);
}

@function rem($px, $base: $base_font) {
	@return calc((#{$px} / #{$base_font}) * 1rem);
}

@function locks(
	$size_min,
	$size_max,
	$viewport_min: map-get($sizes, xs),
	$viewport_max: map-get($sizes, xl)
) {
	$size_increase: ($size_max - $size_min);
	$viewport_increase: ($viewport_max - $viewport_min);
	$slope: ($size_increase) / ($viewport_increase);
	$initial_size: ($size_min - $slope * $viewport_min) / $base_font;

	@return calc(#{$slope * 100}vw + #{$initial_size}rem);
}

.visually-hidden {
	position: absolute;
	width: 1px;
	height: 1px;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	padding: 0;
	border: 0;
	white-space: nowrap;
	pointer-events: none;
}
