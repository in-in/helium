@mixin breakpoint($size) {
	@if map-get($sizes, $size) {
		@media (min-width: map-get($sizes, $size) + px) {
			@content;
		}
	} @else {
		@error "Unknown size: #{$size}";
	}
}

@mixin font-face($name, $filename, $weight: 400, $style: normal, $ext: woff2) {
	@font-face {
		font-family: quote($name);
		font-weight: $weight;
		font-style: $style;
		src: url(quote("../fonts/" + $filename + "." + $ext)) format(quote($ext));
	}
}

@mixin divider($top: true, $bottom: true) {
	position: relative;

	&::before,
	&::after {
		content: "";
		position: absolute;
		inset-inline-start: 0;
		width: 100%;
		height: 1px;
		background-color: $blue_cornflower--l_20;
	}

	&::before {
		inset-block-start: 0;
		display: if($top, null, none);
	}

	&::after {
		inset-block-end: 0;
		display: if($bottom, null, none);
	}
}

@mixin hover_transition() {
	transition-property: background-color, color, fill;
	transition-duration: var(--transition_duration);
	transition-timing-function: var(--transition_easeing);
}

@mixin hover($selector: null, $combinator: " ") {
	@if $selector {
		#{$selector} {
			@include hover_transition();
		}
	} @else {
		@include hover_transition();
	}

	&:hover#{$combinator}#{$selector},
	&:focus#{$combinator}#{$selector} {
		@content;
	}
}

@mixin truncate_text(
	$lh: 1.5,
	$unit: 1em,
	$breakpoint: 4,
	$color-bg: $white,
	$min-height: false
) {
	$height: calc((#{$breakpoint} * #{$lh}) * #{$unit});

	position: relative;
	min-height: if($min-height, $height, auto);
	max-height: $height;
	overflow: hidden;
	background-color: $color-bg;
	line-height: $lh;

	&::after {
		content: "";
		position: absolute;
		right: 0;
		bottom: 0;
		z-index: 1;
		width: calc((#{$lh} * #{$unit}) + 3ch);
		height: calc(((((#{$breakpoint} - 1) * #{$lh}) * #{$unit}) - 100%) * -1000);
		max-height: calc(#{$lh} * #{$unit});
		background-image: linear-gradient(to right, $crystal, $color-bg 50%);
	}
}

@mixin cloud($data, $height, $color: $white) {
	$cloud: compose(&);

	position: absolute;
	z-index: 0;
	fill: $color;

	@each $index, $item in $data {
		&_#{$index} {
			$width: map-get($item, width);

			composes: $cloud;
			inset-block-start: if(
				map-get($item, top),
				#{t2c(map-get($item, top), $height)},
				null
			);
			inset-block-end: if(
				map-get($item, bottom),
				#{t2c(map-get($item, bottom), $height)},
				null
			);
			inset-inline-start: if(
				map-get($item, left),
				#{t2c(map-get($item, left), map-get($sizes, xl), vw)},
				null
			);
			inset-inline-end: if(
				map-get($item, right),
				#{t2c(map-get($item, right), map-get($sizes, xl), vw)},
				null
			);
			width: locks($width / 3, $width);
			transform: if(
				map-get($item, transform),
				#{map-get($item, transform)},
				null
			);
			fill: if(map-get($item, fill), #{map-get($item, fill)}, $color);
		}
	}
}
